#!/bin/sh

### Package: nix-install-linux-kernel
### Version: v20240916.2300
### Author: Michael Gan "xmixahlx" michaelbgan@gmail.com
### License: GPLv3
### Script Dependencies: mold

## OVERRIDES
# NIXTOOLSDIR
if [ -z $NIXTOOLSDIR ]; then
 NIXTOOLSDIR="`pwd`"
 PATH=$NIXTOOLSDIR:$PATH
fi
echo "*** NIXTOOLSDIR selected is $NIXTOOLSDIR."

# INSTALLDEPS
if [ -z $INSTALLDEPS ]; then
 INSTALLDEPS=debian
fi
echo "*** INSTALLDEPS selected is $INSTALLDEPS."

# CC
if [ -z "$CC" ]; then
 CC=ccache gcc-14
fi
echo "*** CC selected is $CC."

# CXX
if [ -z "$CXX" ]; then
 CXX=ccache gcc-14
fi
echo "*** CXX selected is $CXX."

# OPTIMIZE
if [ -z $OPTIMIZE ]; then
 OPTIMIZE=3
fi
echo "*** OPTIMIZE selected is $OPTIMIZE."

# MARCH
if [ -z $MARCH ]; then
 MARCH="znver4"
fi
echo "*** MARCH selected is $MARCH."

# MTUNE
if [ -z $MTUNE ]; then
 MTUNE="znver4"
fi
echo "*** MTUNE selected is $MTUNE."

# MOLD
if [ -z $LINKER ]; then
 LINKER=/usr/local/libexec/mold
fi
echo "*** LINKER selected is $LINKER."

# CFLAGS
if [ -z $CFLAGOVERRIDE ]; then
 CFLAGS="-O$OPTIMIZE -march=$MARCH -mtune=$MTUNE -B$LINKER"
 CXXFLAGS="$CFLAGS"
fi
echo "*** CFLAGS selected is $CFLAGS."
echo "*** CXXFLAGS selected is $CXXFLAGS."

# BRANCH
# Options are mainline and stable
if [ -z $BRANCH ]; then
 BRANCH=mainline
fi
echo "*** BRANCH selected is $BRANCH."

# STABLEVER
if [ -z $STABLEVER ]; then
 STABLEVER=6.11
fi
echo "*** STABLEVER selected is $STABLEVER."

# MAINVER
if [ -z $MAINVER ]; then
 MAINVER=6.12
fi
echo "*** MAINVER selected is $MAINVER."

# POINTVER
if [ -z $POINTVER ]; then
 POINTVER=none
fi
echo "*** POINTVER selected is $POINTVER."

# RCVER
if [ -z $RCVER ]; then
 RCVER=none
fi
echo "*** RCVER selected is $RCVER."

# RTVER
if [ -z $RTVER ]; then
 RTVER=none
fi
echo "*** RTVER selected is $RTVER."

# KERNELCONFIG
if [ -z $KERNELCONFIG ]; then
 KERNELCONFIG="/boot/config-`uname -r`"
fi
echo "*** KERNELCONFIG selected is $KERNELCONFIG."

# KERNELSCRIPTS
if [ -z $KERNELSCRIPTS ]; then
 KERNELSCRIPTS=yes
fi
echo "*** KERNELSCRIPTS selected is $KERNELSCRIPTS."

# KERNELSCRIPTSRT
if [ -z $KERNELSCRIPTSRT ]; then
 KERNELSCRIPTSRT=yes
fi
echo "*** KERNELSCRIPTSRT selected is $KERNELSCRIPTSRT."

# BUILDVER
if [ -z $BUILDVER ]; then
 BUILDVER=xmixahlx1
fi
echo "*** BUILDVER selected is $BUILDVER."

# BUILDVERBOSE
# options are 0, 1, or 2
if [ -z $BUILDVERBOSE ]; then
 BUILDVERBOSE=0
fi
echo "*** BUILDVERBOSE selected is $BUILDVERBOSE."

## VARS
DEVDIR=$NIXTOOLSDIR/upstream
RESDIR=$NIXTOOLSDIR/resources
BUILDDIR=/tmp/nix-tools

## INSTALLDEPS
if [ $INSTALLDEPS = debian ]; then
 sudo apt-get -y install dwarves bc flex ccache build-essential gcc g++
fi

## PREP
set -e
mkdir -p $DEVDIR
cd $DEVDIR

## DOWNLOAD

# Download Stable
echo "*** Downloading base STABLEVER $STABLEVER source."
[ -f linux-$STABLEVER.tar.gz ] || wget https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-$STABLEVER.tar.gz

# Download Stable Pointversions
if [ $BRANCH = stable ]; then
 echo "*** Downloading $BRANCH branch source."
 if [ $POINTVER != none ]; then
  echo "*** Downloading POINTVER $POINTVER source."
  [ -f patch-$STABLEVER.$POINTVER.xz ] || wget https://cdn.kernel.org/pub/linux/kernel/v6.x/patch-$STABLEVER.$POINTVER.xz
 fi
fi

# Download Mainline Release Candidate
if [ $BRANCH = mainline ]; then
 echo "*** Processing $BRANCH branch downloads."
 if [ $RCVER != none ]; then
  echo "*** Processing $BRANCH branch $MAINVER-rc$RCVER."
  if [ ! -f linux-$MAINVER-rc$RCVER-$STABLEVER.patch.gz ]; then
   rm -f linux-$MAINVER-rc$RCVER-$STABLEVER.patch
   wget https://git.kernel.org/torvalds/p/v$MAINVER-rc$RCVER/v$STABLEVER -O linux-$MAINVER-rc$RCVER-$STABLEVER.patch
   gzip linux-$MAINVER-rc$RCVER-$STABLEVER.patch
   rm -f linux-$MAINVER-rc$RCVER-$STABLEVER.patch
  fi
 fi
fi

## PREP
mkdir -p $BUILDDIR
cd $BUILDDIR

## CLEAN

# Clean stable
if [ $BRANCH = stable ]; then
 echo "Cleaning stable root folder."
 if [ $POINTVER != none ]; then
  echo "Cleaning root folder linux-$STABLEVER.$POINTVER."
  rm -Rf linux-$STABLEVER.$POINTVER
 else
  echo "Cleaning root folder linux-$STABLEVER."
  rm -Rf linux-$STABLEVER
 fi
fi

# Clean Mainline
if [ $BRANCH = mainline ]; then
 echo "*** Cleaning mainline root folder."
 if [ $RCVER != none ]; then
  echo "*** Cleaning root folder linux-$MAINVER-rc$RCVER."
  rm -Rf linux-$MAINVER-rc$RCVER
 else
  echo "*** You broke something."
  exit
 fi
fi

## UNPACK
tar xf $DEVDIR/linux-$STABLEVER.tar.gz

## MOVE DIR

# Move Stable Pointversion
if [ $BRANCH = stable ]; then
 echo "*** Processing stable root folder."
 if [ $POINTVER != none ]; then
  echo "*** Moving root folder to linux-$STABLEVER.$POINTVER."
  mv linux-$STABLEVER linux-$STABLEVER.$POINTVER
 else
  echo "*** Not moving root folder."
 fi
fi

# mainline
if [ $BRANCH = mainline ]; then
 echo "*** Processing mainline root folder."
 if [ $RCVER != none ]; then
  echo "*** Moving root folder to linux-$MAINVER-rc$RCVER."
  mv linux-$STABLEVER linux-$MAINVER-rc$RCVER
 else
  echo "*** You broke something."
  exit
 fi
fi

## CHANGE DIRECTORY

# Stable
if [ $BRANCH = stable ]; then
 echo "*** Changing to stable root directory."
 if [ $POINTVER != none ]; then
  cd linux-$STABLEVER.$POINTVER
 else
  cd linux-$STABLEVER
 fi
fi

# Mainline
if [ $BRANCH = mainline ]; then
 echo "*** Changing to mainline root directory."
 if [ $RCVER != none ]; then
  cd linux-$MAINVER-rc$RCVER
 else
  echo "*** You broke something."
  exit
 fi
fi

## PATCH

# Patch stable
if [ $BRANCH = stable ]; then
 echo "*** Processing stable patches."
 if [ $POINTVER != none ]; then
  # POINTVER PATCH
  echo "*** Applying linux-$STABLEVER.$POINTVER patch"
  xzcat $DEVDIR/patch-$STABLEVER.$POINTVER.xz | patch -p1
 else
  echo "*** Not applying POINTVER patch."
 fi
fi

# Patch mainline
if [ $BRANCH = mainline ]; then
 echo "*** Processing mainline patches."
 if [ $RCVER != none ]; then
  echo "*** Applying linux-$MAINVER-rc$RCVER-$STABLEVER patch"
  gzip -dc $DEVDIR/linux-$MAINVER-rc$RCVER-$STABLEVER.patch.gz | patch -p1
 else
  echo "*** Not applying RCVER patch."
 fi
fi

## CONFIG
cp $KERNELCONFIG .config

## KERNELSCRIPTS
if [ $KERNELSCRIPTS = yes ]; then
 ./scripts/config --set-str LOCALVERSION -$MTUNE-$BUILDVER
 ./scripts/config --set-val PREEMPT_NONE n
 ./scripts/config --set-val PREEMPT_VOLUNTARY n
 ./scripts/config --set-val PREEMPT_RT n
 ./scripts/config --set-val PREEMPT y
 ./scripts/config --set-val PREEMPT_DYNAMIC y
 ./scripts/config --set-val HZ_100 n
 ./scripts/config --set-val HZ_250 n
 ./scripts/config --set-val HZ_1000 n
 ./scripts/config --set-val HZ_300 y
 ./scripts/config --set-val CPU_FREQ_DEFAULT_GOV_PERFORMANCE y
 ./scripts/config --set-val CPU_FREQ_GOV_POWERSAVE y
 ./scripts/config --set-val CPU_FREQ_GOV_USERSPACE y
 ./scripts/config --set-val CPU_FREQ_GOV_ONDEMAND y
 ./scripts/config --set-val CPU_FREQ_GOV_CONSERVATIVE y
 ./scripts/config --set-val X86_AMD_PSTATE_DEFAULT_MODE 2
 ./scripts/config --set-val ZSWAP_DEFAULT_ON y
 ./scripts/config --set-val ZSWAP_SHRINKER_DEFAULT_ON y
 ./scripts/config --set-val Z3FOLD y
 ./scripts/config --set-val MODULE_COMPRESS y
 ./scripts/config --set-val MODULE_COMPRESS_ALL y
 ./scripts/config --set-val ZSWAP_ZPOOL_DEFAULT_ZSMALLOC y
 ./scripts/config --set-val ZRAM_BACKEND_LZ4 y
 ./scripts/config --set-val ZRAM_BACKEND_LZ4HC y
 ./scripts/config --set-val ZRAM_BACKEND_ZSTD y
 ./scripts/config --set-val ZRAM_BACKEND_DEFLATE y
 ./scripts/config --set-val ZRAM_BACKEND_842 y
 ./scripts/config --set-val ZRAM_BACKEND_LZO y
 ./scripts/config --set-val ZRAM_DEF_COMP_LZO y
 ./scripts/config --set-val DRM_ACCEL y
 ./scripts/config --set-val DRM_ACCEL_IVPU m
 ./scripts/config --set-val SND_AMD_ASOC_RENOIR m
 ./scripts/config --set-val SND_AMD_ASOC_REMBRANDT m
 ./scripts/config --set-val SND_SOC_AMD_ACP_PCI m
 ./scripts/config --set-val SND_AMD_ASOC_ACP63 m
 ./scripts/config --set-val SND_AMD_ASOC_ACP70 m
 ./scripts/config --set-val SND_SOC_SOF_AMD_ACP63 m
 ./scripts/config --set-val SND_SOC_SOF_AMD_ACP70 m
 ./scripts/config --set-val SND_SOC_AMD_LEGACY_MACH m
 ./scripts/config --set-val SND_SOC_AMD_SOF_MACH m
 ./scripts/config --set-val SND_SOC_AMD_SOF_SDW_MACH m
 ./scripts/config --set-val AMD_WBRF y
 ./scripts/config --set-val AMD_QDMA m
 ./scripts/config --set-val DRM_AMD_ISP y
 ./scripts/config --set-val WIRELESS_HOTKEY m
 ./scripts/config --set-val NTFS3_FS m
 ./scripts/config --set-val NTFS3_LZX_XPRESS y
 ./scripts/config --set-val NFS_LOCALIO y
 ./scripts/config --set-val CIFS_COMPRESSION y
 ./scripts/config --set-val DEBUG_MISC n
fi

## KERNELSCRIPTSRT
# Note: Starting with 6.12-rc1 RT is now in mainline
if [ $KERNELSCRIPTSRT = yes ]; then
 ./scripts/config --set-str LOCALVERSION -rt-$MTUNE-$BUILDVER
 ./scripts/config --set-val PREEMPT_NONE n
 ./scripts/config --set-val PREEMPT_VOLUNTARY n
 ./scripts/config --set-val PREEMPT n
 ./scripts/config --set-val PREEMPT_RT y
 ./scripts/config --set-val PREEMPT_DYNAMIC y
 ./scripts/config --set-val HZ_100 n
 ./scripts/config --set-val HZ_250 n
 ./scripts/config --set-val HZ_300 n
 ./scripts/config --set-val HZ_1000 y
fi

## OLDCONFIG
make oldconfig -j `nproc`

## MENUCONFIG
make menuconfig -j `nproc`

## BUILD
make CC="$CC" CXX="$CXX" KCFLAGS="$CFLAGS" KCPPFLAGS="$CXXFLAGS" KBUILD_VERBOSE="$BUILDVERBOSE" \
-j `nproc` bindeb-pkg

## EXIT
exit

## ENJOY

## EXAMPLE BUILD COMMAND
make CC="ccache gcc-14" CXX="ccache g++-14" \
KCFLAGS="-O3 -march=znver4 -mtune=znver4 -B/usr/local/libexec/mold" \
KCPPFLAGS="-O3 -march=native -mtune=znver4 -B/usr/local/libexec/mold" \
KBUILD_VERBOSE=0 -j `nproc` bindeb-pkg
